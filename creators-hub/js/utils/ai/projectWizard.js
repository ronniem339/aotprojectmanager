// creators-hub/js/utils/ai/projectWizard.js
(function(window) {
    "use strict";

    if (!window.aiUtils) {
        console.error("aiUtils.core.js must be loaded first.");
        return;
    }

    /**
     * Analyzes a script to find points of interest using AI.
     * @param {string} scriptText - The script content to analyze.
     * @returns {Promise<object>} - An object containing the points of interest.
     */
    async function findPointsOfInterestAI(scriptText) {
        const prompt = `Analyze the following video script and identify the key points of interest, main topics, and potential for audience engagement. Extract the core message and any underlying themes.

Script:
---
${scriptText}
---

Respond with a JSON object with the following structure:
{
  "key_points": ["Point 1", "Point 2", "Point 3"],
  "main_topics": ["Topic A", "Topic B"],
  "engagement_potential": "Analysis of where the audience might engage most.",
  "core_message": "The central message of the script.",
  "themes": ["Theme X", "Theme Y"]
}`;

        return window.aiUtils.callGeminiAPI(prompt);
    }

    /**
     * Generates a draft outline for a video based on points of interest and a concept.
     * @param {object} pointsOfInterest - The points of interest from findPointsOfInterestAI.
     * @param {string} videoConcept - The user-defined concept for the video.
     * @returns {Promise<object>} - A structured outline for the video.
     */
    async function generateDraftOutlineAI(pointsOfInterest, videoConcept) {
        const prompt = `Based on the following points of interest and video concept, generate a structured draft outline for a compelling video. The outline should have a clear introduction, main body sections, and a conclusion.

Video Concept:
---
${videoConcept}
---

Points of Interest:
---
${JSON.stringify(pointsOfInterest, null, 2)}
---

Respond with a JSON object with the following structure:
{
  "title_suggestion": "A catchy title for the video",
  "introduction": "Hook for the video and what it's about.",
  "body_sections": [
    { "section_title": "Title for section 1", "talking_points": ["Point A", "Point B"] },
    { "section_title": "Title for section 2", "talking_points": ["Point C", "Point D"] }
  ],
  "conclusion": "Summary of key takeaways and a call to action."
}`;
        return window.aiUtils.callGeminiAPI(prompt);
    }

    /**
     * Generates a detailed script plan from a video outline.
     * @param {object} outline - The video outline generated by generateDraftOutlineAI.
     * @param {string} videoConcept - The user-defined concept for the video.
     * @returns {Promise<object>} - A detailed plan for the script.
     */
    async function generateScriptPlanAI(outline, videoConcept) {
        const prompt = `Take the following video outline and expand it into a detailed script plan. For each section, describe the intended narrative, visual ideas, and pacing.

Video Concept:
---
${videoConcept}
---

Video Outline:
---
${JSON.stringify(outline, null, 2)}
---

Respond with a JSON object with the following structure:
{
  "plan": [
    { 
      "section": "Introduction", 
      "narrative": "Detailed description of the intro's story.", 
      "visuals": "Suggestions for b-roll, graphics, or on-screen text.",
      "pacing": "fast-paced | medium | slow"
    },
    { 
      "section": "Body Section 1", 
      "narrative": "Detailed description of this section's content.", 
      "visuals": "Suggestions for visuals.",
      "pacing": "medium"
    },
    { 
      "section": "Conclusion", 
      "narrative": "How to wrap up the video.", 
      "visuals": "Ending screen, call to action visuals.",
      "pacing": "slow"
    }
  ]
}`;
        return window.aiUtils.callGeminiAPI(prompt);
    }

    /**
     * Generates a full video script from a script plan.
     * @param {object} scriptPlan - The detailed plan from generateScriptPlanAI.
     * @param {string} videoConcept - The user-defined concept for the video.
     * @returns {Promise<object>} - An object containing the full script.
     */
    async function generateFullScriptAI(scriptPlan, videoConcept) {
        const prompt = `Using the script plan and video concept below, write a complete, engaging video script. The script should be ready for a presenter to read, with clear dialogue and cues for actions or visuals where necessary.

Video Concept:
---
${videoConcept}
---

Script Plan:
---
${JSON.stringify(scriptPlan, null, 2)}
---

Respond with a JSON object with the following structure:
{
  "script": [
      { "type": "intro", "dialogue": "The full text for the introduction..." },
      { "type": "section", "scene_title": "Title of the first main section", "dialogue": "The dialogue for this section..." , "visual_cue": "Cut to a shot of X" },
      { "type": "outro", "dialogue": "The full text for the conclusion and call to action..." }
  ]
}`;
        return window.aiUtils.callGeminiAPI(prompt);
    }

    /**
     * Refines a video concept based on an inventory of existing content.
     * @param {string} videoConcept - The initial video concept.
     * @param {string} inventory - A description of available footage, articles, etc.
     * @param {string} tone - The desired tone of the video.
     * @param {string} style - The desired style of the video.
     * @returns {Promise<object>} - A refined video concept.
     */
    async function refineVideoConceptBasedOnInventory(videoConcept, inventory, tone, style) {
        const prompt = `Given the initial video concept and the inventory of available assets, refine the concept to best leverage what's available. The final concept should align with the desired tone and style.

Initial Concept:
---
${videoConcept}
---

Available Inventory:
---
${inventory}
---

Desired Tone: ${tone}
Desired Style: ${style}

Respond with a JSON object containing the refined concept and a justification.
{
  "refined_concept": "A more detailed and focused video concept.",
  "justification": "Why this refined concept is stronger and how it uses the available inventory."
}`;
        return window.aiUtils.callGeminiAPI(prompt);
    }

    // Expose functions
    Object.assign(window.aiUtils, {
        findPointsOfInterestAI,
        generateDraftOutlineAI,
        generateScriptPlanAI,
        generateFullScriptAI,
        refineVideoConceptBasedOnInventory
    });

})(window);
